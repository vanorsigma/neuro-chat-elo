// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.1
//   protoc               v3.12.4
// source: leaderboardExportTypes.proto

/* eslint-disable */
import * as _m0 from "protobufjs/minimal";
import Long = require("long");

export const protobufPackage = "leaderboardExportTypes";

export interface BadgeInformation {
  description: string;
  imageUrl: string;
}

export interface LeaderboardExportItem {
  id: string;
  rank: number;
  elo: number;
  username: string;
  delta: number;
  avatar: string;
  badges: BadgeInformation[];
}

export interface LeaderboardExport {
  items: LeaderboardExportItem[];
}

function createBaseBadgeInformation(): BadgeInformation {
  return { description: "", imageUrl: "" };
}

export const BadgeInformation = {
  encode(message: BadgeInformation, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.description !== "") {
      writer.uint32(10).string(message.description);
    }
    if (message.imageUrl !== "") {
      writer.uint32(18).string(message.imageUrl);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): BadgeInformation {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBadgeInformation();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.description = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.imageUrl = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BadgeInformation {
    return {
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      imageUrl: isSet(object.imageUrl) ? globalThis.String(object.imageUrl) : "",
    };
  },

  toJSON(message: BadgeInformation): unknown {
    const obj: any = {};
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.imageUrl !== "") {
      obj.imageUrl = message.imageUrl;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<BadgeInformation>, I>>(base?: I): BadgeInformation {
    return BadgeInformation.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<BadgeInformation>, I>>(object: I): BadgeInformation {
    const message = createBaseBadgeInformation();
    message.description = object.description ?? "";
    message.imageUrl = object.imageUrl ?? "";
    return message;
  },
};

function createBaseLeaderboardExportItem(): LeaderboardExportItem {
  return { id: "", rank: 0, elo: 0, username: "", delta: 0, avatar: "", badges: [] };
}

export const LeaderboardExportItem = {
  encode(message: LeaderboardExportItem, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.rank !== 0) {
      writer.uint32(16).uint32(message.rank);
    }
    if (message.elo !== 0) {
      writer.uint32(29).float(message.elo);
    }
    if (message.username !== "") {
      writer.uint32(34).string(message.username);
    }
    if (message.delta !== 0) {
      writer.uint32(40).int64(message.delta);
    }
    if (message.avatar !== "") {
      writer.uint32(50).string(message.avatar);
    }
    for (const v of message.badges) {
      BadgeInformation.encode(v!, writer.uint32(58).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): LeaderboardExportItem {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLeaderboardExportItem();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.rank = reader.uint32();
          continue;
        case 3:
          if (tag !== 29) {
            break;
          }

          message.elo = reader.float();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.username = reader.string();
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.delta = longToNumber(reader.int64() as Long);
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.avatar = reader.string();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.badges.push(BadgeInformation.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): LeaderboardExportItem {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      rank: isSet(object.rank) ? globalThis.Number(object.rank) : 0,
      elo: isSet(object.elo) ? globalThis.Number(object.elo) : 0,
      username: isSet(object.username) ? globalThis.String(object.username) : "",
      delta: isSet(object.delta) ? globalThis.Number(object.delta) : 0,
      avatar: isSet(object.avatar) ? globalThis.String(object.avatar) : "",
      badges: globalThis.Array.isArray(object?.badges)
        ? object.badges.map((e: any) => BadgeInformation.fromJSON(e))
        : [],
    };
  },

  toJSON(message: LeaderboardExportItem): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.rank !== 0) {
      obj.rank = Math.round(message.rank);
    }
    if (message.elo !== 0) {
      obj.elo = message.elo;
    }
    if (message.username !== "") {
      obj.username = message.username;
    }
    if (message.delta !== 0) {
      obj.delta = Math.round(message.delta);
    }
    if (message.avatar !== "") {
      obj.avatar = message.avatar;
    }
    if (message.badges?.length) {
      obj.badges = message.badges.map((e) => BadgeInformation.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<LeaderboardExportItem>, I>>(base?: I): LeaderboardExportItem {
    return LeaderboardExportItem.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<LeaderboardExportItem>, I>>(object: I): LeaderboardExportItem {
    const message = createBaseLeaderboardExportItem();
    message.id = object.id ?? "";
    message.rank = object.rank ?? 0;
    message.elo = object.elo ?? 0;
    message.username = object.username ?? "";
    message.delta = object.delta ?? 0;
    message.avatar = object.avatar ?? "";
    message.badges = object.badges?.map((e) => BadgeInformation.fromPartial(e)) || [];
    return message;
  },
};

function createBaseLeaderboardExport(): LeaderboardExport {
  return { items: [] };
}

export const LeaderboardExport = {
  encode(message: LeaderboardExport, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    for (const v of message.items) {
      LeaderboardExportItem.encode(v!, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): LeaderboardExport {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLeaderboardExport();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.items.push(LeaderboardExportItem.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): LeaderboardExport {
    return {
      items: globalThis.Array.isArray(object?.items)
        ? object.items.map((e: any) => LeaderboardExportItem.fromJSON(e))
        : [],
    };
  },

  toJSON(message: LeaderboardExport): unknown {
    const obj: any = {};
    if (message.items?.length) {
      obj.items = message.items.map((e) => LeaderboardExportItem.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<LeaderboardExport>, I>>(base?: I): LeaderboardExport {
    return LeaderboardExport.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<LeaderboardExport>, I>>(object: I): LeaderboardExport {
    const message = createBaseLeaderboardExport();
    message.items = object.items?.map((e) => LeaderboardExportItem.fromPartial(e)) || [];
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function longToNumber(long: Long): number {
  if (long.gt(globalThis.Number.MAX_SAFE_INTEGER)) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (long.lt(globalThis.Number.MIN_SAFE_INTEGER)) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return long.toNumber();
}

if (_m0.util.Long !== Long) {
  _m0.util.Long = Long as any;
  _m0.configure();
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
